
riscv32位开发环境配置

#riscv32工具链

    git clone https://github.com/riscv/riscv-tools # 下载工具链的源代码

    export RISCV=/path/to/install/riscv/toolchain # 指定工具链的安装目录

    export PATH=$RISCV/bin:$PATH # 将工具链加入执行路径

    sudo apt-get install autoconf automake autotools-dev curl libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev 

    cd riscv-tools

    git submodule update --init --recursive # 递归地更新当前目录下所有子模块

    cp build-rv32ima.sh build-rv32g.sh

    vim build-rv32g.sh # 将"rv32ima"改为"rv32g"， 将"ilp32"改为"ilp32d"

    chmod +x build-rv32g.sh # 增加可执行权限

    ./build-rv32g.sh >& build.log # 编译工具链，并将编译过程记录在 build.log 文件中

#riscv-qemu

    cd riscv-tools/riscv-gnu-toolchain/riscv-qemu

    sudo apt install libgtk-3-dev # 安装支持的库

    ./configure --target-list=riscv32-softmmu # 生成 Makefile

    make # 编译

    cp riscv32-softmmu/qemu-system-riscv32 $RISCV/bin # 将模拟器程序放到执行路径中

    #如果编译出的模拟器没有spike-v1.10机器，则git自动抓取的版本不够新，请到riscv-qemu的官网下载(https://github.com/riscv/riscv-qemu/wiki)

#ucore on riscv32

    git clone -b riscv32-priv-1.10 --single-branch https://github.com/chyyuu/ucore_os_lab

    cd ucore_os_lab/labcodes_answer

    ./gccbuildall.sh # 将各个 lab 下的 ucore 编译成镜像文件

    cd labX # 进入某个 lab 目录

    make qemu # 在 qemu 上运行

